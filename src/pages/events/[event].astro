---
import Layout from "@/layouts/Layout.astro";
import Footer from "@/components/Footer.astro";
import LayoutSticky from "@/layouts/LayoutSticky.astro";
import Prose from "@/components/Prose.astro";
import { getCollection } from "astro:content";

export async function getStaticPaths() {
  const eventsCollection = await getCollection("events");

  return eventsCollection.map((event) => {
    return {
      params: { event: event.slug },
      props: { event },
    };
  });
}

const { event } = Astro.props;
const teamsCollection = await getCollection("teams");
const membersCollection = await getCollection("members");

const eventParticipants = membersCollection.filter((member) =>
  event.data.participants.includes(member.slug),
);

type PointsLog = {
  points: number;
  reason: string;
  team: string;
  isGoodPoints: boolean;
};

// Group points by team for summary
const teamPointsSummary =
  event.data.pointsLogs?.reduce(
    (acc: Record<string, { good: number; bad: number }>, log: PointsLog) => {
      if (!acc[log.team]) {
        acc[log.team] = { good: 0, bad: 0 };
      }

      if (log.isGoodPoints) {
        acc[log.team].good += log.points;
      } else {
        acc[log.team].bad += log.points;
      }

      return acc;
    },
    {},
  ) || {};
---

<Layout
  title={`${event.data.name} | Culture Cup`}
  description={`Event details for ${event.data.name}`}
>
  <main>
    <section
      class="mb-16 bg-zu-light-primary dark:bg-zu-dark-primary"
      data-nosnippet
    >
      <div class="wrapper">
        <div class="grid h-[calc(100svh_-_3rem)] min-h-[600px]">
          <div
            class="self-end pb-20 text-[3.5rem] font-extralight leading-[1.4] text-zu-light-banner-heading sm:text-[5rem] md:text-[6.5rem] lg:text-[8rem] lg:leading-[1.1] xl:text-[9.5rem] dark:text-zu-dark-banner-heading"
          >
            {event.data.name}<br />
          </div>
        </div>
      </div>
    </section>

    <section>
      <div class="wrapper divider-b *:pb-20-alt *:mb-12-alt">
        <Prose>
          <LayoutSticky>
            <div slot="left" class="h-full">
              <h1
                class="sticky top-8 text-[1.375rem] font-bold uppercase leading-[48px]"
              >
                / Overview
              </h1>
            </div>
            <div slot="right" class="mt-2.5">
              <div
                class="bg-white dark:bg-gray-800 rounded-lg shadow-md overflow-hidden mb-10"
              >
                <div class="p-6">
                  <div class="flex justify-between items-center mb-4">
                    <div
                      class="px-3 py-1 bg-blue-100 dark:bg-blue-900/30 text-blue-700 dark:text-blue-300 rounded-full font-medium"
                    >
                      {
                        new Date(event.data.date).toLocaleDateString("en-US", {
                          year: "numeric",
                          month: "long",
                          day: "numeric",
                        })
                      }
                    </div>
                    <a
                      href="/events"
                      class="text-blue-600 dark:text-blue-400 hover:underline"
                    >
                      ‚Üê Back to all events
                    </a>
                  </div>

                  {
                    event.data.description && (
                      <div class="mb-6">
                        <h2 class="text-xl font-bold mb-2">Description</h2>
                        <p class="text-gray-600 dark:text-gray-400">
                          {event.data.description}
                        </p>
                      </div>
                    )
                  }

                  {
                    Object.keys(teamPointsSummary).length > 0 && (
                      <div class="mb-6">
                        <h2 class="text-xl font-bold mb-4">Points Summary</h2>
                        <div class="grid gap-4 md:grid-cols-2">
                          {Object.entries(teamPointsSummary).map(
                            ([teamSlug, points]) => {
                              const team = teamsCollection.find(
                                (t) => t.slug === teamSlug,
                              );
                              const netPoints =
                                (points as { good: number; bad: number }).good -
                                (points as { good: number; bad: number }).bad;
                              return (
                                <div class="bg-gray-50 dark:bg-gray-700 p-4 rounded-lg">
                                  <h3 class="font-bold text-lg">
                                    <a
                                      href={`/teams/${teamSlug}`}
                                      class="hover:text-blue-600 dark:hover:text-blue-400"
                                    >
                                      {team?.data.name || "Unknown Team"}
                                    </a>
                                  </h3>
                                  <div class="grid grid-cols-3 gap-2 mt-2">
                                    <div class="bg-green-50 dark:bg-green-900/20 p-2 rounded text-center">
                                      <span class="text-green-600 dark:text-green-400 font-medium">
                                        +{points.good}
                                      </span>
                                    </div>
                                    <div class="bg-red-50 dark:bg-red-900/20 p-2 rounded text-center">
                                      <span class="text-red-600 dark:text-red-400 font-medium">
                                        -{points.bad}
                                      </span>
                                    </div>
                                    <div
                                      class={`${netPoints >= 0 ? "bg-blue-50 dark:bg-blue-900/20" : "bg-orange-50 dark:bg-orange-900/20"} p-2 rounded text-center`}
                                    >
                                      <span
                                        class={`${netPoints >= 0 ? "text-blue-600 dark:text-blue-400" : "text-orange-600 dark:text-orange-400"} font-medium`}
                                      >
                                        Net: {netPoints}
                                      </span>
                                    </div>
                                  </div>
                                </div>
                              );
                            },
                          )}
                        </div>
                      </div>
                    )
                  }
                </div>
              </div>
            </div>
          </LayoutSticky>

          <LayoutSticky>
            <div slot="left" class="h-full">
              <h1
                class="sticky top-8 text-[1.375rem] font-bold uppercase leading-[48px]"
              >
                / Participants
              </h1>
            </div>
            <div slot="right" class="mt-2.5">
              <div class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-6">
                {
                  eventParticipants.map((member) => (
                    <div class="bg-white dark:bg-gray-800 rounded-lg shadow-md overflow-hidden hover:shadow-lg transition-shadow">
                      <div class="aspect-square overflow-hidden">
                        <img
                          src={member.data.image}
                          alt={member.data.name}
                          class="w-full h-full object-cover transition-transform duration-300 hover:scale-105"
                        />
                      </div>
                      <div class="p-4 text-center">
                        <h3 class="font-bold">{member.data.name}</h3>
                        <p class="text-gray-600 dark:text-gray-400 text-sm">
                          {member.data.position}
                        </p>
                      </div>
                    </div>
                  ))
                }
              </div>
            </div>
          </LayoutSticky>

          {
            event.data.pointsLogs && event.data.pointsLogs.length > 0 && (
              <LayoutSticky>
                <div slot="left" class="h-full">
                  <h1 class="sticky top-8 text-[1.375rem] font-bold uppercase leading-[48px]">
                    / Points Log
                  </h1>
                </div>
                <div slot="right" class="mt-2.5">
                  <div class="space-y-4">
                    {event.data.pointsLogs.map((log: PointsLog) => {
                      const team = teamsCollection.find(
                        (t) => t.slug === log.team,
                      );
                      return (
                        <div
                          class={`p-5 rounded-lg ${
                            log.isGoodPoints
                              ? "bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-800"
                              : "bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800"
                          }`}
                        >
                          <div class="flex justify-between items-start">
                            <div>
                              <div class="flex items-center mb-2">
                                <h3 class="font-bold text-lg">
                                  {team?.data.name || "Unknown Team"}
                                </h3>
                                <span
                                  class={`ml-3 px-2 py-1 rounded-full text-sm ${
                                    log.isGoodPoints
                                      ? "bg-green-100 dark:bg-green-800 text-green-800 dark:text-green-200"
                                      : "bg-red-100 dark:bg-red-800 text-red-800 dark:text-red-200"
                                  }`}
                                >
                                  {log.isGoodPoints ? "+" : "-"}
                                  {log.points} points
                                </span>
                              </div>
                              <p class="text-gray-700 dark:text-gray-300">
                                {log.reason}
                              </p>
                            </div>
                            <a
                              href={`/teams/${team?.slug}`}
                              class="bg-white dark:bg-gray-700 px-3 py-1 rounded text-blue-600 dark:text-blue-400 text-sm hover:bg-blue-50 dark:hover:bg-gray-600"
                            >
                              View Team
                            </a>
                          </div>
                        </div>
                      );
                    })}
                  </div>
                </div>
              </LayoutSticky>
            )
          }
        </Prose>
      </div>
    </section>
  </main>
  <Footer />
</Layout>
