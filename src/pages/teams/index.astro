---
import Layout from "@/layouts/Layout.astro";
import TopBar from "@/components/TopBar.astro";
import BannerMessage from "@/components/BannerMessage.astro";
import Footer from "@/components/Footer.astro";
import LayoutSticky from "@/layouts/LayoutSticky.astro";
import Prose from "@/components/Prose.astro";
import { getCollection } from "astro:content";
import { calculateTeamPoints } from "@/utils/pointsCalculator";

const teamsCollection = await getCollection("teams");
const membersCollection = await getCollection("members");
const gamesCollection = await getCollection("games");
const eventsCollection = await getCollection("events");

// Calculate points for all teams and sort by total points
const teamsWithPoints = await Promise.all(
  teamsCollection.map(async (team) => {
    const pointsData = await calculateTeamPoints(
      team.slug,
      teamsCollection,
      gamesCollection,
      eventsCollection
    );
    return {
      team,
      points: pointsData
    };
  })
);

// Sort teams by total points (highest first)
const sortedTeams = teamsWithPoints.sort((a, b) => 
  b.points.totalPoints - a.points.totalPoints
);

// Add rank field that handles ties properly
let currentRank = 1;
let prevPoints = -1;
const rankedTeams = sortedTeams.map((teamData, index) => {
  // If this team has fewer points than the previous team, increment the rank
  if (index > 0 && teamData.points.totalPoints < prevPoints) {
    currentRank = index + 1;
  }
  prevPoints = teamData.points.totalPoints;
  
  return {
    ...teamData,
    rank: currentRank
  };
});
---

<Layout title="Teams | Culture Cup" description="All Culture Cup Teams">
  <TopBar />
  <main>
    <section
      class="mb-16 bg-zu-light-primary dark:bg-zu-dark-primary"
      data-nosnippet
    >
      <div class="wrapper">
        <div class="grid h-[calc(100svh_-_3rem)] min-h-[600px]">
          <div class="self-start">
            <BannerMessage>
              <p>Team Showcase</p>
            </BannerMessage>
          </div>
          <div
            class="self-end pb-20 text-[3.5rem] font-extralight leading-[1.4] text-zu-light-banner-heading sm:text-[5rem] md:text-[6.5rem] lg:text-[8rem] lg:leading-[1.1] xl:text-[9.5rem] dark:text-zu-dark-banner-heading"
          >
            Teams<br />
          </div>
        </div>
      </div>
    </section>
    
    <section>
      <div class="wrapper wrapper-divider *:pb-20-alt *:mb-12-alt">
        <Prose>
          <LayoutSticky>
            <div slot="left" class="h-full">
              <h1 class="sticky top-8 text-[1.375rem] font-bold uppercase leading-[48px]">
                / All Teams
              </h1>
            </div>
            <div slot="right" class="mt-2.5">
              <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
                {rankedTeams.map(({team, points, rank}) => {
                  const teamMembers = membersCollection.filter(member => 
                    team.data.members.includes(member.slug)
                  );
                  
                  return (
                    <a href={`/teams/${team.slug}`} class="block group">
                      <div class="bg-gray-100 dark:bg-gray-800 rounded-lg overflow-hidden transform transition-all duration-300 group-hover:scale-[1.02] group-hover:shadow-lg">
                        <div class="p-6">
                          <div class="flex justify-between items-center mb-4">
                            <h2 class="text-2xl font-bold group-hover:text-blue-600 transition-colors">{team.data.name}</h2>
                            <div class="bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-100 px-3 py-1 rounded-full">
                              {points.totalPoints} points
                            </div>
                          </div>
                          
                          <div class="flex items-center mb-4">
                            <div class="h-10 w-10 rounded-full bg-gray-200 flex items-center justify-center text-xl font-bold mr-3">
                              #{rank}
                            </div>
                            <span class="text-lg">{teamMembers.length} members</span>
                          </div>
                          
                          <div class="flex justify-between mb-4">
                            <div class="px-3 py-1 bg-green-100 dark:bg-green-900/30 text-green-700 dark:text-green-300 rounded-full font-medium">
                              +{points.goodPoints} good
                            </div>
                            <div class="px-3 py-1 bg-red-100 dark:bg-red-900/30 text-red-700 dark:text-red-300 rounded-full font-medium">
                              -{points.badPoints} bad
                            </div>
                          </div>
                          
                          <div class="grid grid-cols-4 gap-2">
                            {teamMembers.slice(0, 4).map(member => (
                              <div class="relative aspect-square overflow-hidden rounded-lg">
                                <img
                                  src={member.data.image}
                                  alt={member.data.name}
                                  width="80"
                                  height="80"
                                  class="object-cover w-full h-full transition-transform duration-300 group-hover:scale-110"
                                />
                              </div>
                            ))}
                          </div>
                          
                          <div class="mt-4 text-right">
                            <span class="text-blue-600 group-hover:underline">View team details â†’</span>
                          </div>
                        </div>
                      </div>
                    </a>
                  );
                })}
              </div>
            </div>
          </LayoutSticky>
        </Prose>
      </div>
    </section>
  </main>
  <Footer />
</Layout> 