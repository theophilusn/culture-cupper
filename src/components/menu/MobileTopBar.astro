---
import TopLogo from "./TopLogo.astro";
import NavLink from "./NavLink.astro";
import { type Link, links } from "@/components/menu/links.ts";
---

<section class="relative z-50 lg:hidden">
  <div id="background-menu-mobile" class="menu-background absolute bg-black">
  </div>
  <div class="absolute top-8 flex w-full items-center justify-between">
    <div class="ml-10">
      <TopLogo />
    </div>
    <div class="absolute right-0 mr-10 text-white">
      <button
        class="cursor-pointer uppercase"
        id="open-menu-mobile"
        data-testid="mobile-menu-open">Menu</button
      >
      <button class="hidden cursor-pointer uppercase" id="close-menu-mobile"
        >Close</button
      >
    </div>
  </div>
  <div
    class="invisible absolute *:transition-all *:duration-500"
    id="mobile-links-container"
  >
    <nav class="wrapper mt-36">
      <ul
        class="flex flex-col gap-10 text-white"
        data-testid="mobile-menu-items"
      >
        {
          links.map((link: Link, index: number) =>
            index === links.length - 1 ? (
              <NavLink
                text={link.text}
                href={link.href}
                id="focus-end"
                classes="-translate-x-10 opacity-0"
              />
            ) : (
              <NavLink
                text={link.text}
                href={link.href}
                classes="-translate-x-10 opacity-0"
              />
            ),
          )
        }
      </ul>
    </nav>
  </div>
</section>

<style>
  .menu-background {
    height: 2000px;
    width: 2000px;
    transform-origin: right center;
    transform: skewX(-12deg);
    transition: opacity 0.3s ease;
    opacity: 0;
    pointer-events: none;
  }

  .menu-background.active {
    animation: slide-in 0.5s forwards ease-out;
    opacity: 1;
    pointer-events: auto;
  }

  .menu-background.inactive {
    animation: slide-out 0.5s forwards ease-in;
  }

  @keyframes slide-in {
    from {
      transform: translate(120%, -30%) skewX(-12deg);
    }
    to {
      transform: translate(-20%, 0%) skewX(-12deg);
    }
  }

  @keyframes slide-out {
    from {
      transform: translate(-20%, 0%) skewX(-12deg);
    }
    to {
      transform: translate(120%, -30%) skewX(-12deg);
    }
  }

  #mobile-links-container nav ul li a {
    display: block;
    transition:
      transform 0.4s ease,
      opacity 0.4s ease;
  }

  #mobile-links-container.invisible nav ul li a {
    transform: translateX(-10px);
    opacity: 0;
  }
</style>

<script>
  document.addEventListener("astro:page-load", () => {
    const openMobileMenuButton = document.getElementById("open-menu-mobile");
    const closeMobileMenuButton = document.getElementById("close-menu-mobile");
    const mobileMenuBackground = document.getElementById(
      "background-menu-mobile",
    );
    const mobileMenuLinksContainer = document.getElementById(
      "mobile-links-container",
    );
    const navLinks = document.querySelectorAll(
      "#mobile-links-container nav ul li a",
    );
    const focusStart = document.getElementById("focus-start");
    const focusEnd = document.getElementById("focus-end");
    const mediaQuery = window.matchMedia("(min-width: 1024px)");
    let isMenuOpen = false;

    function openMobileMenu() {
      if (isMenuOpen) return;

      // Disable scrolling
      document.body.style.overflow = "hidden";
      document.body.style.position = "fixed";
      document.body.style.width = "100%";

      closeMobileMenuButton?.classList.remove("hidden");
      openMobileMenuButton?.classList.add("hidden");
      mobileMenuLinksContainer?.classList.remove("invisible");
      mobileMenuBackground?.classList.remove("inactive");
      mobileMenuBackground?.classList.add("active");
      mobileMenuBackground?.addEventListener("animationend", showLinks, {
        once: true,
      });
      isMenuOpen = true;
    }

    function closeMobileMenu() {
      if (!isMenuOpen) return;
      closeMobileMenuButton?.classList.add("hidden");
      openMobileMenuButton?.classList.remove("hidden");

      navLinks.forEach((link) => {
        link.classList.remove("translate-x-0", "opacity-100");
        link.classList.add("-translate-x-10", "opacity-0");
      });

      setTimeout(() => {
        mobileMenuBackground?.classList.add("inactive");
        mobileMenuBackground?.classList.remove("active");

        mobileMenuBackground?.addEventListener(
          "animationend",
          () => {
            mobileMenuLinksContainer?.classList.add("invisible");
          },
          { once: true },
        );
      }, 100);

      // Re-enable scrolling
      document.body.style.overflow = "";
      document.body.style.position = "";
      document.body.style.width = "";

      isMenuOpen = false;
    }

    function showLinks() {
      navLinks.forEach((link, index) => {
        setTimeout(() => {
          link.classList.remove("-translate-x-10", "opacity-0");
          link.classList.add(
            "translate-x-0",
            "opacity-100",
            "transition-all",
            "duration-300",
          );
        }, 50 * index);
      });
    }

    function handleKeyDown(event: KeyboardEvent) {
      if (
        event.key === "Enter" &&
        document.activeElement === openMobileMenuButton
      ) {
        openMobileMenu();
      }
      if (!isMenuOpen) return;

      if (event.key === "Escape") {
        closeMobileMenu();
      }

      if (event.key === "Tab" && isMenuOpen) {
        if (document.activeElement === focusStart && event.shiftKey) {
          event.preventDefault();
          focusEnd?.focus();
        }
        if (document.activeElement === focusEnd && !event.shiftKey) {
          event.preventDefault();
          focusStart?.focus();
        }
      }
      if (
        event.key === "Enter" &&
        document.activeElement === closeMobileMenuButton
      ) {
        closeMobileMenu();
      }
    }

    mediaQuery.addEventListener("change", (event) => {
      if (event.matches && isMenuOpen) closeMobileMenu();
    });
    document.addEventListener("keydown", handleKeyDown);
    openMobileMenuButton?.addEventListener("click", () => openMobileMenu());
    closeMobileMenuButton?.addEventListener("click", () => closeMobileMenu());
  });
</script>
