---
// A pure HTML/CSS/JS bar chart component with no external dependencies
interface Props {
  teamData: Array<{
    name: string;
    points: number;
    color?: string;
  }>;
  title?: string;
  height?: number;
}

const { 
  teamData, 
  title = "Team Points", 
  height = 320 
} = Astro.props;

// Sort data from highest to lowest
const sortedData = [...teamData].sort((a, b) => b.points - a.points);

// Calculate max value for scaling
const maxValue = Math.max(...sortedData.map(team => Math.abs(team.points)));
// Add a 10% buffer to the max value to ensure bars don't touch the top
const scaledMaxValue = maxValue > 0 ? maxValue * 1.1 : 1;

// Default colors if not provided
const defaultColors = ["#1A56DB", "#16A34A", "#DC2626", "#CA8A04"];
---

<div class="w-full bg-white rounded-lg shadow dark:bg-gray-800 p-4 md:p-6 mt-12">
  {title && <h3 class="text-xl font-bold mb-6 text-gray-900 dark:text-white">{title}</h3>}
  
  <div class="bar-chart-container" style={`height: ${height}px;`}>
    {sortedData.map((team, index) => {
      const isNegative = team.points < 0;
      // Calculate heights for both positive and negative values
      const barHeightPercentage = Math.abs(team.points) / scaledMaxValue * 100;
      const barHeightDisplay = Math.max(barHeightPercentage, 2); // Ensure at least 2% height for visibility
      const barColor = team.color || defaultColors[index % defaultColors.length];
      
      return (
        <div class="bar-group">
          <div class="bar-container">
            <div 
              class={`bar ${isNegative ? 'negative' : 'positive'}`}
              style={`
                height: ${barHeightDisplay}%; 
                background-color: ${barColor};
              `}
              data-value={team.points}
            >
              <span class="bar-value">{team.points}</span>
            </div>
          </div>
          <div class="bar-label">
            <span>{team.name}</span>
          </div>
        </div>
      );
    })}
  </div>
</div>

<style>
  .bar-chart-container {
    display: flex;
    justify-content: space-around;
    align-items: flex-end;
    width: 100%;
    position: relative;
    gap: 8px;
  }
  
  .bar-group {
    display: flex;
    flex-direction: column;
    align-items: center;
    flex: 1;
    height: 100%;
  }
  
  .bar-container {
    width: 100%;
    height: 85%;
    display: flex;
    justify-content: center;
    align-items: flex-end;
  }
  
  .bar {
    min-width: 40px;
    min-height: 1px; /* Ensure bars are always visible */
    width: 70%;
    border-radius: 8px 8px 0 0;
    position: relative;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    transition: transform 0.3s ease;
  }
  
  .bar:hover {
    opacity: 0.85;
    transform: scaleY(1.02);
    cursor: pointer;
  }
  
  .bar.negative {
    background-color: #DC2626;
    align-self: flex-start;
    border-radius: 0 0 8px 8px;
    transform-origin: bottom;
    position: absolute;
    bottom: 0;
  }
  
  .bar-value {
    position: absolute;
    top: -25px;
    left: 50%;
    transform: translateX(-50%);
    font-weight: bold;
    color: #4B5563;
    background-color: white;
    padding: 2px 8px;
    border-radius: 12px;
    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
    font-size: 0.875rem;
    white-space: nowrap;
  }
  
  .bar.negative .bar-value {
    top: auto;
    bottom: -25px;
  }
  
  .bar-label {
    width: 100%;
    text-align: center;
    margin-top: 8px;
    font-size: 0.875rem;
    color: #4B5563;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    padding: 0 4px;
  }

  /* Dark mode adjustments */
  :global(.dark) .bar-value {
    background-color: #1F2937;
    color: #E5E7EB;
  }
  
  :global(.dark) .bar-label {
    color: #D1D5DB;
  }
</style>

<script>
  // Simple tooltip functionality when hovering over bars
  document.addEventListener('DOMContentLoaded', () => {
    const bars = document.querySelectorAll('.bar');
    
    bars.forEach((bar) => {
      const valueEl = bar.querySelector('.bar-value');
      
      if (valueEl instanceof HTMLElement) {
        bar.addEventListener('mouseenter', () => {
          const value = bar.getAttribute('data-value');
          if (value) {
            valueEl.textContent = value;
            valueEl.style.opacity = '1';
          }
        });
        
        bar.addEventListener('mouseleave', () => {
          valueEl.style.opacity = '0.7';
        });
      }
    });
  });
</script> 